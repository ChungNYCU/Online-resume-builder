@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@using System.Web

@inject JsonFileProductService ProductService


<input @bind="searchCriteria" style="width:100%; margin-top:20px; padding:5px; height:40px;" placeholder="Search"><br>
<div>
    <button @onclick="(e => Search())" style="margin-top:10px;" class="btn btn-primary" data-toggle="cardRefresh" data-target="#cardRefresh">
        Search
    </button>
    <button @onclick="(e => Clear())" style="margin-top:10px; margin-left:5px;" class="btn btn-primary" data-toggle="cardRefresh" data-target="#cardRefresh">
        Clear
    </button>
</div>
@if (searching)
{
    <div class="card-columns cardRefresh" id="#cardRefresh">
        @foreach (var product in returnList)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">Viewed: @product.Viewed</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <a class="btn btn-primary" href="/Product/Read/@product.Id">Open</a>
                    </small>
                </div>
            </div>
        }
    </div>

    <hr style="height:3px;border-width:0;color:gray;background-color:gray">

    <div class="card-columns cardRefresh" id="#cardRefresh">
        @foreach (var product in missedList)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">Viewed: @product.Viewed</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <a class="btn btn-primary" href="/Product/Read/@product.Id">Open</a>
                    </small>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="card-columns cardRefresh" id="#cardRefresh">
        @foreach (var product in ProductService.GetAllData())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">Viewed: @product.Viewed</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <a class="btn btn-primary" href="/Product/Read/@product.Id">Open</a>
                    </small>
                </div>
            </div>
        }
    </div>
}


@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.FullName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Photo');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.AboutMe</p>
                            <h5 class="title" id="productTitle">Awards</h5>
                            <p>@selectedProduct.AwardList[0]</p><br>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <p>
                        <label>
                            Personal Status:
                            <input @bind="PersonalStatus" /><br>
                        </label>
                    </p>
                    <button @onclick="(e => SubmitPersonalStatus(PersonalStatus))" data-toggle="modal" data-target="#productModal" class="btn btn-primary"> Update Personal Status </button>
                    <button @onclick="(e => SubmitPersonalStatus(' '.ToString()))" data-toggle="modal" data-target="#productModal" class="btn btn-primary"> Delete </button>
               
               </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    // Currently selected product for viewing more info
    ProductModel selectedProduct;
    // Id of the selected product
    string selectedProductId;

        // Contents of the search bar
        string searchCriteria = "";
        // Contains all matched products
        List<ProductModel> returnList = new List<ProductModel>();
        // Contains all unmatched products
        List<ProductModel> missedList = new List<ProductModel>();
        // Determines when a search is made
        bool searching = false;

    /// <summary>
    /// Used when more infor is requested from the card
    /// </summary>
    /// <param name="productId"></param>
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    // String that signifies the card or products personal status
    public string PersonalStatus { get; set; }

    /// <summary>
    /// Saves the personal status to the database
    /// </summary>
    /// <param name="PersonalStatus"></param>
    void SubmitPersonalStatus(string PersonalStatus)
    {
        ProductService.UpdatePersonalStatus(selectedProductId, PersonalStatus);
        SelectProduct(selectedProductId);
    }

    // Current rating on display
    int currentRating = 0;
    // New rating
    int voteCount = 0;
    // New rating name
    string voteLabel;

    /// <summary>
    /// Retreives the rating on a product
    /// </summary>
    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    /// <summary>
    /// Submits the current rating to be saved to the database
    /// </summary>
    /// <param name="rating"></param>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    /// <summary>
    /// Clears the search bar and resets the search results
    /// </summary>
    void Clear()
    {
        searching = false;
        searchCriteria = "";
    }

    /// <summary>
    /// Search function that searches the product list for any words that may be found from the search bar
    /// Creates two lists, one contains the successful searches and the other the failed searches
    /// </summary>
    void Search()
    {
        if(searchCriteria == null)
        {
            searching = false;
            return;
        }
        if(searchCriteria.Length <= 0)
        {
            searching = false;
            return;
        }
        searching = true;

        // Words from the search bar to be split into individual words
        string[] words = searchCriteria.Split(' ');
        // List of products found that contain a word from the search bar
        returnList = new List<ProductModel>();
        // List of products left that had not been matched to a word fromthe search bar
        missedList = new List<ProductModel>();

        // Eliminate search bar without contents
        if (words.Length <= 0)
        {
            return;
        }


        // Run through all products stored in the products.json
        foreach (var product in ProductService.GetAllData())
        {
            // Flag to store the product when no products are matched
            bool found = false;

            // Run through all individual words found in the search bar
            // When a match is found in any data found is flagged and the foreach loop is broken to continue
            foreach (var word in words)
            {
                if (product.PersonalStatus != null && product.PersonalStatus.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Photo != null && product.Photo.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.LinkedinUrl != null && product.LinkedinUrl.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.FullName != null && product.FullName.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }

                if (product.AwardList != null)
                {
                    foreach (var award in product.AwardList)
                    {
                        if (award.Award != null && award.Award.ToLower().Contains(word.ToLower()))
                        {
                            returnList.Add(product);
                            found = true;
                            break;
                        }
                        if (award.Issuer != null && award.Issuer.ToLower().Contains(word.ToLower()))
                        {
                            returnList.Add(product);
                            found = true;
                            break;
                        }
                        if (award.AwardDate != null && award.AwardDate.ToLower().Contains(word.ToLower()))
                        {
                            returnList.Add(product);
                            found = true;
                            break;
                        }
                        }
                    }
                    if (product.Experiences != null && product.Experiences.Title != null && product.Experiences.Title.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.Experiences != null && product.Experiences.Employer != null && product.Experiences.Employer.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.Experiences != null && product.Experiences.StartDate != null && product.Experiences.StartDate.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.Experiences != null && product.Experiences.EndDate != null && product.Experiences.EndDate.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.Experiences != null && product.Experiences.Description != null && product.Experiences.Description.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.PersonalSkill != null && product.PersonalSkill.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.AboutMe != null && product.AboutMe.ToLower().Contains(word.ToLower()))
                    {
                        returnList.Add(product);
                        found = true;
                        break;
                    }
                    if (product.EducationList != null)
                    {
                        foreach (var ed in product.EducationList)
                        {
                            if (ed.University != null && ed.University.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.Location != null && ed.Location.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.Degree != null && ed.Degree.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.Major != null && ed.Major.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.GPA != null && ed.GPA.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.StartDate != null && ed.StartDate.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                            if (ed.EndDate != null && ed.EndDate.ToLower().Contains(word.ToLower()))
                            {
                                returnList.Add(product);
                                found = true;
                                break;
                            }
                        }

                        if (found)
                        {
                            break;
                        }
                    }

                }

                // Activated when no match is found
                if (!found)
                {
                    missedList.Add(product);
                }
            }
        }
    }
