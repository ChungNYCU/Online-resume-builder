@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@using System.Web

@inject JsonFileProductService ProductService

<div class="search-bar">
    <input @bind="searchCriteria" style="width:100%; margin-top:10px;"><br>
    <button @onclick="(e => Search(searchCriteria))" style="margin-top:10px;" class="btn btn-primary" data-toggle="cardRefresh" data-target="#cardRefresh">
        Search
    </button>
</div>

@if (searchResult.Count() != 0)
{
    <div class="card-columns cardRefresh" id="#cardRefresh">
        <style>
            .card {
                margin: 20px;
                padding: 20px;
            }
        </style>
        @foreach (var product in returnList)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">@product.PersonalStatus</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>

    <hr style="height:2px;border-width:0;color:gray;background-color:gray">

    <div class="card-columns cardRefresh" id="#cardRefresh">
        <style>
            .card {
                margin: 20px;
                padding: 20px;
            }
        </style>
        @foreach (var product in missedList)
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">@product.PersonalStatus</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="card-columns cardRefresh" id="#cardRefresh">
        <style>
            .card {
                margin: 20px;
                padding: 20px;
            }
        </style>
        @foreach (var product in ProductService.GetAllData())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Photo');">
                </div>
                <div class="card-body">
                    <h5 class="card-title">@product.FullName</h5>
                    <h5 class="card-title">@product.PersonalStatus</h5>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <button @onclick="(e => SelectProduct(product.Id))"
                                data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>
}


@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.FullName</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Photo');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.AboutMe</p>
                            <h5 class="title" id="productTitle">Awards</h5>
                            <p>@selectedProduct.Awards</p><br>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <p>
                        <label>
                            Personal Status:
                            <input @bind="PersonalStatus" /><br>
                        </label>
                    </p>
               </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string searchCriteria = "";
    List<ProductModel> searchResult = new List<ProductModel>();
    List<ProductModel> returnList = new List<ProductModel>();
    List<ProductModel> missedList = new List<ProductModel>();


    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    public string PersonalStatus { get; set; }


    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    void Search(string criteria)
    {
        string[] words = criteria.Split(' ');
        returnList = new List<ProductModel>();
        missedList = new List<ProductModel>();

        if (words.Length <= 0)
        {
            return;
        }

        foreach (var product in ProductService.GetAllData())
        {
            bool found = false;
            foreach (var word in words)
            {
                if (product.PersonalStatus != null && product.PersonalStatus.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Photo != null && product.Photo.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.LinkedinUrl != null && product.LinkedinUrl.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.FullName != null && product.FullName.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Awards != null && product.Awards.Award != null && product.Awards.Award.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Awards != null && product.Awards.Issuer != null && product.Awards.Issuer.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Awards != null && product.Awards.AwardDate != null && product.Awards.AwardDate.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.University != null && product.EducationHistory.University.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.Location != null && product.EducationHistory.Location.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.Degree != null && product.EducationHistory.Degree.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.Major != null && product.EducationHistory.Major.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.GPA != null && product.EducationHistory.GPA.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.StartDate != null && product.EducationHistory.StartDate.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.EducationHistory != null && product.EducationHistory.EndDate != null && product.EducationHistory.EndDate.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Experiences != null && product.Experiences.Title != null && product.Experiences.Title.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Experiences != null && product.Experiences.Employer != null && product.Experiences.Employer.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Experiences != null && product.Experiences.StartDate != null && product.Experiences.StartDate.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Experiences != null && product.Experiences.EndDate != null && product.Experiences.EndDate.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.Experiences != null && product.Experiences.Description != null && product.Experiences.Description.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.PersonalSkill != null && product.PersonalSkill.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
                if (product.AboutMe != null && product.AboutMe.ToLower().Contains(word.ToLower()))
                {
                    returnList.Add(product);
                    found = true;
                    break;
                }
            }

            if (!found)
            {
                missedList.Add(product);
            }
        }
        searchResult = new List<ProductModel>(returnList);
        searchResult.AddRange(missedList);
    }
}
